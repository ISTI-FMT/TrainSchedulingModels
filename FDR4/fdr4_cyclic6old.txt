transparent normal

M0 = < 1, 9,10,13,15,20,23,22,17,18,11, 9, 2, 1>
M1 = < 3, 9,10,13,15,20,24,22,17,18,11, 9, 4, 3>
M2 = < 5,27,11,13,16,20,25,22,17,18,12,27, 6, 5>
M3 = < 7,27,11,13,16,20,26,22,17,18,12,27, 8, 7>
M4 = <23,22,17,18,11, 9, 2, 1, 9,10,13,15,20,23>
M5 = <24,22,17,18,11, 9, 4, 3, 9,10,13,15,20,24>
M6 = <25,22,17,18,12,27, 6, 5,27,11,13,16,20,25>
M7 = <26,22,17,18,12,27, 8, 7,27,11,13,16,20,26>


  ------ region A: train constraints ------
A0 = < 0, 0, 0, 1, 0,-1, 0, 1, 0, 0,-1, 0, 0, 0> -- G1
A1 = < 0, 0, 0, 1, 0,-1, 0, 1, 0, 0,-1, 0, 0, 0> -- R1
A2 = < 0, 0, 1,-1, 0, 1, 0, 0, 0,-1, 0, 0, 0, 0> -- Y1
A3 = < 0, 0, 1,-1, 0, 0, 0, 1, 0,-1, 0, 0, 0, 0> -- B1
A4 = < 0, 1, 0, 0,-1, 0, 0, 0, 0, 0, 1, 0,-1, 0> -- G2
A5 = < 0, 1, 0, 0,-1, 0, 0, 0, 0, 0, 1, 0,-1, 0> -- R2
A6 = < 0, 0, 0,-1, 0, 0, 0, 0, 0, 1,-1, 0, 1, 0> -- Y2
A7 = < 0, 1, 0,-1, 0, 0, 0, 0, 0, 1,-1, 0, 0, 0> -- B2 
 ------------------------------------------

  ------- region B: train constraints ------
B0 = < 0, 0, 0, 1, 0,-1, 0, 1, 0, 0,-1, 0, 0, 0> -- G1
B1 = < 0, 0, 0, 1, 0,-1, 0, 1, 0, 0,-1, 0, 0, 0> -- R1
B2 = < 0, 0, 1,-1, 0, 0, 0, 1, 0,-1, 0, 0, 0, 0> -- Y1
B3 = < 0, 0, 1,-1, 0, 1, 0, 0, 0,-1, 0, 0, 0, 0> -- B1
B4 = < 0, 1, 0, 0,-1, 0, 0, 0, 0, 0, 1, 0,-1, 0> -- G2
B5 = < 0, 1, 0, 0,-1, 0, 0, 0, 0, 0, 1, 0,-1, 0> -- R2
B6 = < 0, 1, 0,-1, 0, 0, 0, 0, 0, 1,-1, 0, 0, 0> -- Y2
B7 = < 0, 0, 0,-1, 0, 0, 0, 0, 0, 1,-1, 0, 1, 0> -- B2
  ------------------------------------------
 

  ------- region C: train constraints ------
C0 = < 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,-1, 0, 0, 0> -- G1
C1 = < 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,-1, 0, 0, 0> -- R1
C2 = < 0, 0, 1, 0, 0,-1, 0, 1, 0,-1, 0, 0, 0, 0> -- Y1
C3 = < 0, 0, 1, 0, 0,-1, 0, 1, 0,-1, 0, 0, 0, 0> -- B1
C4 = < 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 1, 0> -- G2
C5 = < 0, 1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0> -- R2
C6 = < 0, 1, 0,-1, 0, 0, 0, 0, 0, 1, 0, 0,-1, 0> -- Y2
C7 = < 0, 1, 0,-1, 0, 0, 0, 0, 0, 1, 0, 0,-1, 0> -- B2
  ------------------------------------------

  ------- region D: train constraints ------
D0 = < 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,-1, 0, 0, 0> -- G1
D1 = < 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,-1, 0, 0, 0> -- R1
D2 = < 0, 0, 1, 0, 0,-1, 0, 1, 0,-1, 0, 0, 0, 0> -- Y1
D3 = < 0, 0, 1, 0, 0,-1, 0, 1, 0,-1, 0, 0, 0, 0> -- B1
D4 = < 0, 1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0> -- G2
D5 = < 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 1, 0> -- R2
D6 = < 0, 1, 0,-1, 0, 0, 0, 0, 0, 1, 0, 0,-1, 0> -- Y2
D7 = < 0, 1, 0,-1, 0, 0, 0, 0, 0, 1, 0, 0,-1, 0> -- B2
  ------------------------------------------
LA = 7
LB = 7
LC = 7
LD = 7

el(y,x) = if x==0 then head(y) else el(tail(y),x-1)

channel exit:{1..27}
channel enter:{1..27}.{ -1..1}.{ -1..1}.{ -1..1}.{ -1..1}
channel arrived
channel step


T0(p)=  ( p < 12 &  enter!el(M0,p+1)!el(A0,p+1)!el(B0,p+1)!el(C0,p+1)!el(D0,p+1)
 			-> exit!el(M0,p)  -> T0(p+1) )
        [] 
        ( p == 12 &  enter!el(M0,p+1)!el(A0,p+1)!el(B0,p+1)!el(C0,p+1)!el(D0,p+1)
 			-> exit!el(M0,p)  -> T0(0) )
        [] 
        ( p == 0 & arrived -> T0(p) )

T1(p)=  ( p < 12 & enter!el(M1,p+1)!el(A1,p+1)!el(B1,p+1)!el(C1,p+1)!el(D1,p+1)
			-> exit!el(M1,p)  -> T1(p+1) )
        [] 
        ( p == 12 & enter!el(M1,p+1)!el(A1,p+1)!el(B1,p+1)!el(C1,p+1)!el(D1,p+1)
			-> exit!el(M1,p)  -> T1(0) )
        [] 
        ( p == 0 & arrived -> T1(p) )

T2(p)=  ( p < 12 & enter!el(M2,p+1)!el(A2,p+1)!el(B2,p+1)!el(C2,p+1)!el(D2,p+1)
			-> exit!el(M2,p)  -> T2(p+1) )
        [] 
        ( p == 12 & enter!el(M2,p+1)!el(A2,p+1)!el(B2,p+1)!el(C2,p+1)!el(D2,p+1)
			-> exit!el(M2,p)  -> T2(0) )
        [] 
        ( p == 0  & arrived -> T2(p) )

T3(p)=  ( p < 0 & enter!el(M3,p+1)!el(A3,p+1)!el(B3,p+1)!el(C3,p+1)!el(D3,p+1)
			-> exit!el(M3,p)  -> T3(p+1) )
        [] 
        ( p == 12 & enter!el(M3,p+1)!el(A3,p+1)!el(B3,p+1)!el(C3,p+1)!el(D3,p+1)
			-> exit!el(M3,p)  -> T3(0) )
        [] 
        ( p == 0 & arrived -> T3(p) )

T4(p)=  ( p < 12 & enter!el(M4,p+1)!el(A4,p+1)!el(B4,p+1)!el(C4,p+1)!el(D4,p+1)
			-> exit!el(M4,p)  -> T4(p+1) )
        [] 
        ( p == 12 & enter!el(M4,p+1)!el(A4,p+1)!el(B4,p+1)!el(C4,p+1)!el(D4,p+1)
			-> exit!el(M4,p)  -> T4(0) )
        [] 
        ( p == 0 & arrived -> T4(p) )

T5(p)=  ( p < 12 & enter!el(M5,p+1)!el(A5,p+1)!el(B5,p+1)!el(C5,p+1)!el(D5,p+1)
			-> exit!el(M5,p)  -> T5(p+1))
        [] 
        ( p == 12 & enter!el(M5,p+1)!el(A5,p+1)!el(B5,p+1)!el(C5,p+1)!el(D5,p+1)
			-> exit!el(M5,p)  -> T5(0))
        [] 
        ( p == 0 & arrived -> T5(p) )

T6(p)=  ( p < 12 & enter!el(M6,p+1)!el(A6,p+1)!el(B6,p+1)!el(C6,p+1)!el(D6,p+1)
			-> exit!el(M6,p)  -> T6(p+1) )
        [] 
        ( p == 12 & enter!el(M6,p+1)!el(A6,p+1)!el(B6,p+1)!el(C6,p+1)!el(D6,p+1)
			-> exit!el(M6,p)  -> T6(0) )
        [] 
        ( p == 0 & arrived -> T6(p) )

T7(p)=  ( p < 0 & enter!el(M7,p+1)!el(A7,p+1)!el(B7,p+1)!el(C7,p+1)!el(D7,p+1)
			-> exit!el(M7,p)  -> T7(p+1) )
        [] 
        ( p == 12 & enter!el(M7,p+1)!el(A7,p+1)!el(B7,p+1)!el(C7,p+1)!el(D7,p+1)
			-> exit!el(M7,p)  -> T7(0) )
        [] 
        ( p == 0 & arrived -> T7(p) )

P_enter(x)=
  exit!x -> P_exit(x)

P_exit(x)=
  enter!x?a?b -> P_enter(x)
        
------------------------

FPLACES = ||| i: union({8..22},{2,4,6,27}) @ P_exit(i)

BPLACES = ||| i: {1,3,5,7,23,24,25,26} @ P_enter(i)

PLACES =  FPLACES ||| BPLACES

------------------------
--   disable system transitions like  enter -> enter -> exit -> exit and force
--   each enter to be immediately followed by a exit
PULSE =
  enter?x?a?b  -> exit?y -> PULSE
  
------------------------

RA(n) = enter?x!0?b?c?d -> RA(n) []
        n >0 & enter?x!-1?b?c?d -> RA(n-1) []
        n<LA & enter?x!1?b?c?d -> RA(n+1)

RB(n) = ( enter?x?a!0?c?d -> RB(n) )
        []
        ( n >0 & enter?x?a!-1?c?d -> RB(n-1) )
        []
        ( n<LB & enter?x?a!1?c?d -> RB(n+1) )
        
RC(n) = ( enter?x?a?b!0?d -> RC(n) )
        []
        ( n >0 & enter?x?a?b!-1?d -> RC(n-1) )
        []
        ( n<LC & enter?x?a?b!1?d -> RC(n+1) )
        
RD(n) = ( enter?x?a?b?c!0 -> RD(n) )
        []
        ( n >0 & enter?x?a?b?c!-1 -> RD(n-1) )
        []
        ( n<LD & enter?x?a?b?c!1 -> RD(n+1) )
        
------------------------
        
TRAINS =    T0(0) [|{|arrived|}|] 
           (T1(0) [|{|arrived|}|] 
           (T2(0) [|{|arrived|}|] 
           (T3(0) [|{|arrived|}|] 
           (T4(0) [|{|arrived|}|] 
           (T5(0) [|{|arrived|}|] 
           (T6(0) [|{|arrived|}|]
            T7(0) ))))))

------------------------
SYS =  ( PLACES  [|{|exit,enter|}|] PULSE ) 
           [|{|exit,enter|}|] 
       ( TRAINS  [|{|enter|}|] 
       		(( RA(1) [|{|enter|}|] RB(1) )
       		 [|{|enter|}|] 
       		( RC(1) [|{|enter|}|] RD(1) ))
        )
       
-- hide unrelevant channels to improve compression
ASYS= SYS\{|enter,exit|} 

--  compression is helpful for two verifications
CSYS = normal(ASYS)


REC = (arrived -> REC) [] (step -> REC) 
SPEC = REC \{step}

assert CSYS [FD= SPEC
assert SPEC [FD= CSYS
--
--   Enumerated to 10_380_720 states and 16_846_897 transitions
--   Result: Passed
--
--     verfication process :
--  time ./FDR4.app/Contents/MacOS/refines fdr4_cyclic6.txt
--
--     ...
--   Enumerated to ...
--   Result: Passed
--
--  when LA =8  the second assertion fails withthe counter-example:
--    ("--reveal-taus" for counter-examples)
--
------------------------
--https://www.cs.ox.ac.uk/projects/fdr/manual/optimising/overview.html#identifying-the-problem
------------------------
--- --refinement-storage-file-path=//Users/mazzanti/Desktop/FDR4/swap/
--  to the command line version will cause FDR to store temporary data in the two directories. 
--


